extractAIC(shell.modelb)
library(DS705data)
data(rowtime)
summary(rowtime)
require(leaps)
allmods = regsubsets(racetime~., nbest=1, nvmax=8, data=rowtime)
summary(allmods) # get summary of best subsets
summary(allmods)$adjr2 #adjusted R^2 for some models
#par(mar=c(4,1,0,1)+0.1)
#plot(allmods, scale="adjr2",main="")
lm.full = lm(racetime~., data=rowtime) # regress y on everything in data set
step(lm.full,direction="backward")
lm.full = lm(racetime~., data=rowtime) # regress y on everything in data set
lm.null = lm(racetime~1,data=rowtime) # regress y on no variables in data set, this is the "intercept only" model
step(lm.null,scope=list(lower=lm.null,upper=lm.full),direction="forward")
extractAIC(lm(racetime~calfcir+biceps+bestvj+legpower+meso+ecto+expvarsity+preexper, data=rowtime))
library(car)
modelf <- lm(racetime~estffm + expvarsity + tall + preexper + biceps + meso + calfcir + bestvj,data=rowtime)
vif(modelf)
# The code in this chunk is provided for students
pairs(rowtime[c(1,2,3,4)])
pairs(rowtime[c(1,5,6,7)])
pairs(rowtime[c(1,8,9,10)])
pairs(rowtime[c(1,11,12,13,14)])
pairs(rowtime[c(1,15,16,17,18)])
modelf <- lm(racetime~estffm + expvarsity + tall + preexper + biceps + meso + calfcir + bestvj,data=rowtime)
step(modelf, scope = . ~ .^2, direction = 'forward')
modelf2 <- lm(formula = racetime ~ estffm + expvarsity + tall + preexper +
biceps + meso + calfcir + bestvj + tall:calfcir + estffm:bestvj,
data = rowtime)
summary(modelf2)
extractAIC(modelf2)
hist(modelf2$residuals) # check histogram for normality
boxplot(modelf2$residuals)  # check boxplot of residuals for outliers
qqnorm(modelf2$residuals)  # look at a normal probability plot to assess normality
qqline(modelf2$residuals)  # add the line ot the qqplot
shapiro.test(modelf2$residuals) # conduct Shapiro-Wilk test on residuals
plot(modelf2$fitted.values,modelf2$residuals)
abline(h=0) # add a horizontal line at 0 for reference
library(lmtest) # install.packages("lmtest") in your console prior to using this
bptest(modelf2)
data("farmpond")
fit1 <- glm(RICH~.,data=farmpond,family="binomial")
fit.null <- glm(RICH~1,data=farmpond,family="binomial")
step(fit.null,scope=list(lower=fit.null,upper=fit1),direction="forward")
fit2 <- glm(formula = RICH ~ COND + TOTNITR + FISH, family = "binomial",
data = farmpond)
predprob <- fitted(fit2) # get predicted probabilities
threshhold <- 0.5  # Set Y=1 when predicted probability exceeds this
predRICH <- cut(predprob, breaks=c(-Inf, threshhold, Inf),
labels=c("Sp Rich<4", "Sp Rich>=4"))  # Y=1 is "Sp Rich>=4" here
cTab <- table(farmpond$RICH, predRICH)
addmargins(cTab)
p <- sum(diag(cTab)) / sum(cTab)  # compute the proportion of correct classifications
print(paste('Proportion correctly predicted = ', p))
library(pscl)
r2 <- pR2(fit2)  # use McFadden R-square, package = "pscl"
r2[4] # McFadden's R-square is in the 4th column of the output
library(ResourceSelection)
hoslem.test(farmpond$RICH, fitted(fit2), g=5)
data(shells, package="DS705data")
shell.full <- lm(Y ~ ., data=shells)
shell.null <- lm(Y ~ 1, data=shells)
step(shell.null, scope=list(lower=shell.null, upper=shell.full), direction="both")
shell.model <- lm(formula = Y ~ X2 + X4 + X1 + X6 + X7, data = shells)
vif(shell.model)
shell.modelb <- lm(formula = Y ~ X1 + X2 + X2*X2 + X4 + X6 , data = shells)
extractAIC(shell.model)
extractAIC(shell.modelb)
summary(shell.model)
summary(shell.model)
summary(shell.modelb)
summary(shell.model)
summary(shell.modelb)
#TV,Radio,Newspaper,Internet
#Sample from 2015, 38, 20,15,42
#Distribution in 1995,45%,18%,16%,21%
Props = c(0.45, .18, .16, .21)
Counts = c(38, 20, 15, 42)
out <- chisq.test(x=Counts,p=Props)
summary(out)
out
data(careerbarrier, package="DS705data")
data(cheese, package="DS705data")
glm(taste ~ acetic + person, data=cheese, family="binomial")
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
require(psych)
data(careerbarrier, package="DS705data")
data(careerbarrier, package="DS705data")
careercor <- cor(careerbarrier)
?cortest.bartlett
?cortest.bartlett
cortest.bartlett(careercor, n=400)
cortest.bartlett(careercor)
cortest.bartlett(careercor, n=76)
data("ifanmot")
KMO(careercor)
careercor <- cor(careerbarrier[,2:15])
cortest.bartlett(careercor, n=76)
KMO(careercor)
data(careerbarrier, package="DS705data")
careercor <- cor(careerbarrier[,2:15])
cortest.bartlett(careercor, n=76)
KMO(careercor)
career.output <- princomp(careerbarrier[,2:15], cor=TRUE)
plot(career.output,type="lines") # scree plot
abline(h=1,lty=2)
output$sdev^2
career.output$sdev^2
cop <- principal(careerbarrier[,2:15],nfactors=5,rotate="varimax")
cop
summary(cop)
print(cop,cut=.5,sort=TRUE)
require(DS705data)
data("ifanmot")
require(psych)
require(psych)
mat <- cor(ifanmot[,1:42])
cortest.bartlett(mat,n=400)
KMO(mat)
output <- princomp(ifanmot[,1:42], cor=TRUE)
plot(output,type="lines") # scree plot
abline(h=1,lty=2)
output$sdev^2  # This prints the eigenvalues so you can compare to 1
fan <- principal(ifanmot[,1:42],nfactors=3,rotate="varimax")
print(fan,cut=.5,sort=TRUE)
fan <- principal(ifanmot[,1:42],nfactors=9,rotate="varimax")
print(fan,cut=.5,sort=TRUE)
fan <- principal(ifanmot[,1:42],nfactors=9,rotate="varimax")
fulldata <- cbind(ifanmot,fan$scores)
require(plyr)
fulldata <- rename(fulldata,c("RC1"="Entertainment","RC9"="Social","RC5"="Identification","RC3"="Patriotism","RC4"="Artistic","RC7"="Loyalty","RC2"="Gambling","RC6"="Boredom","RC8"="Fun"))
head(fulldata[,43:54])
counts=matrix(c(98,110,161,264,321,280),nrow=2)
?prop.test
?chisq.test
chisq.test(counts)
View(counts)
?prop.test
thincounts=matrix(c(98,161,264,280),nrow=2)
prop.test(thincounts, conf.level=.9)
oddsRatio(thincounts, verbose=TRUE)
library(mosaic)
oddsRatio(thincounts, verbose=TRUE)
?oddsRatio
oddsRatio(thincounts, verbose=TRUE)
library(dplyr)
library(caret)
library(ggplot2)
library(gridExtra)
library(GGally)
library(scales)
library(lmtest)
library(car)
require(psych)
library(knitr)
library(mosaic)
library(formattable)
library(boot)
library(DS705data)
data("BirdPecks")
boxplot(BirdPecks$pecks ~ BirdPecks$group)
hist(BirdPecks$pecks[BirdPecks$group == 1], breaks=10)
hist(BirdPecks$pecks[BirdPecks$group == 2], breaks=10)
shapiro.test(BirdPecks$pecks[BirdPecks$group == 1])
shapiro.test(BirdPecks$pecks[BirdPecks$group == 2])
bootMean <- function(x, i){
mean(x[i])
}
myBoot <- boot(BirdPecks$pecks, bootMean, R=500000, strata=BirdPecks$group)
boot.ci(myBoot, conf= .90, type='bca')
#wilcox.test(BirdPecks$pecks ~ BirdPecks$group, conf.level = .9, conf.int=TRUE)
data("StrengthSpeed")
StrengthSpeed$diff <- StrengthSpeed$before - StrengthSpeed$after
boxplot(StrengthSpeed$diff)
hist(StrengthSpeed$diff, breaks=7)
qqnorm(StrengthSpeed$diff)
qqline(StrengthSpeed$diff)
t.test(StrengthSpeed$diff,alternative="greater",conf.level=0.95)
t.test(x=StrengthSpeed$before, y=StrengthSpeed$after,alternative="greater",conf.level=0.95, paired=TRUE)
grouponeHLT <- c(79, 76, 74, 70, 81, 85, 73, 78, 69, 72, 83, 89, 72, 79, 75)
grouptwoHLT <- c(78, 96, 85, 91, 77,103, 72, 93, 98, 86, 70, 110, 70, 91, 99)
boxplot(grouponeHLT)
hist(grouponeHLT, breaks=7)
qqnorm(grouponeHLT)
qqline(grouponeHLT)
shapiro.test(grouponeHLT)
boxplot(grouptwoHLT)
hist(grouptwoHLT, breaks=7)
qqnorm(grouptwoHLT)
qqline(grouptwoHLT)
shapiro.test(grouptwoHLT)
t.test(x=grouponeHLT, y=grouptwoHLT, alternative="two.sided",conf.level=0.95)
t.test(x=grouptwoHLT, alternative="two.sided", conf.level=0.95)
bootMean <- function(x, i){
mean(x[i])
}
myBootCFB <- boot(grouptwoHLT, bootMean, R=500000)
boot.ci(myBootCFB, conf= .95, type='bca')
data(treadwear)
boxplot(treadwear$wear~treadwear$brand)
mean(treadwear$wear[treadwear$brand=='A'])
mean(treadwear$wear[treadwear$brand=='B'])
mean(treadwear$wear[treadwear$brand=='C'])
mean(treadwear$wear[treadwear$brand=='D'])
sd(treadwear$wear[treadwear$brand=='A'])
sd(treadwear$wear[treadwear$brand=='B'])
sd(treadwear$wear[treadwear$brand=='C'])
sd(treadwear$wear[treadwear$brand=='D'])
shapiro.test(treadwear$wear[treadwear$brand=='A'])
shapiro.test(treadwear$wear[treadwear$brand=='B'])
shapiro.test(treadwear$wear[treadwear$brand=='C'])
shapiro.test(treadwear$wear[treadwear$brand=='D'])
oneway.test(treadwear$wear~treadwear$brand, var.equal=F)
data(diamond, package="DS705data")
ggplot(data=diamond, aes(x=price, y=carat)) + geom_point()
carat.model <- lm(price~carat,data=diamond)
summary(carat.model)
cor.test(diamond$price, diamond$carat)
confint(carat.model)
resids <- carat.model$resid
carat.fit <- carat.model$fitted.values
plot(carat.fit,resids)
plot(diamond$carat,resids)
hist(resids)
qqnorm(resids)
qqline(resids)
shapiro.test(resids)
bptest(carat.model)
summary(carat.model)
data(shells, package="DS705data")
shell.full <- lm(Y ~ ., data=shells)
shell.null <- lm(Y ~ 1, data=shells)
step(shell.null, scope=list(lower=shell.null, upper=shell.full), direction="both")
shell.model <- lm(formula = Y ~ X2 + X4 + X1 + X6 + X7, data = shells)
vif(shell.model)
shell.modelb <- lm(formula = Y ~ X1 + X2 + X2*X2 + X4 + X6 , data = shells)
extractAIC(shell.model)
extractAIC(shell.modelb)
summary(shell.model)
summary(shell.modelb)
#TV,Radio,Newspaper,Internet
#Sample from 2015, 38, 20,15,42
#Distribution in 1995,45%,18%,16%,21%
Props = c(0.45, .18, .16, .21)
Counts = c(38, 20, 15, 42)
out <- chisq.test(x=Counts,p=Props)
out
data(cheese, package="DS705data")
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
data(careerbarrier, package="DS705data")
careercor <- cor(careerbarrier[,2:15])
cortest.bartlett(careercor, n=76)
KMO(careercor)
career.output <- princomp(careerbarrier[,2:15], cor=TRUE)
plot(career.output,type="lines") # scree plot
abline(h=1,lty=2)
career.output$sdev^2
cop <- principal(careerbarrier[,2:15],nfactors=5,rotate="varimax")
print(cop,cut=.5,sort=TRUE)
counts=matrix(c(98,110,161,264,321,280),nrow=2)
chisq.test(counts)
thincounts=matrix(c(98,161,264,280),nrow=2)
prop.test(thincounts, conf.level=.9)
oddsRatio(thincounts, verbose=TRUE)
prop.test(thincounts, conf.level=.9)
counts=matrix(c(98,110,161,264,321,280),nrow=2)
chisq.test(counts)
thincounts=matrix(c(98,161,264,280),nrow=2)
prop.test(thincounts, conf.level=.9)
oddsRatio(thincounts, verbose=TRUE)
#secondtry =matrix(c(98,161,264,280),nrow=2)
chisq.test(counts)
thincounts=matrix(c(98,161,264,280),nrow=2)
prop.test(thincounts, conf.level=.9)
thincounts
counts
counts=matrix(c(98,264,110,321,161,264,321,280),nrow=2)
chisq.test(counts)
thincounts=matrix(c(98,161,264,280),nrow=2)
prop.test(thincounts, conf.level=.9)
oddsRatio(thincounts, verbose=TRUE)
#secondtry =matrix(c(98,161,264,280),nrow=2)
counts
counts
counts=matrix(c(98,264,110,321,161,280),nrow=2)
chisq.test(counts)
counts
thincounts=matrix(c(98,264,161,280),nrow=2)
prop.test(thincounts, conf.level=.9)
?prop.test
thincounts
prop.test(thincounts, conf.level=.9, correct=FALSE)
prop.test(x=thincounts, conf.level=.9, correct=FALSE)
thincounts=matrix(c(98,264,161,280),nrow=2)
thincounts
chisq.test(counts)
counts=matrix(c(98,264,110,321,161,280),nrow=2)
nausea = c(98, 110, 161)
nonausea = c(264, 321, 280)
chisq.test(nausea, nonausea)
thincounts=matrix(c(98,264,161,280),nrow=2)
prop.test(x=thincounts, conf.level=.9, correct=FALSE)
oddsRatio(thincounts, verbose=TRUE)
#secondtry =matrix(c(98,161,264,280),nrow=2)
thincounts
?prop.test
chisq.test(nausea, nonausea)
summary(chisq.test(nausea, nonausea))
chisq.test(nausea, nonausea)
counts
?chisq.test
counts=matrix(c(98,110,161,264,321,280),nrow=3)
counts=matrix(c(98,110,161,264,321,280),nrow=3)
colnames(counts) <- c("Nausea", "No Nausea")
rownames(counts) <- c("Front","Middle", "Rear")
addmargins(counts)
chisq.test(counts)
thincounts=matrix(c(98,264,161,280),nrow=2)
prop.test(x=thincounts, conf.level=.9, correct=FALSE)
oddsRatio(thincounts, verbose=TRUE)
#secondtry =matrix(c(98,161,264,280),nrow=2)
counts
?chisq.test
chisq.test(counts)
counts=matrix(c(98,110,161,264,321,280),nrow=3)
colnames(counts) <- c("Nausea", "No Nausea")
rownames(counts) <- c("Front","Middle", "Rear")
addmargins(counts)
chisq.test(counts)
thincounts=matrix(c(98,161,264,280),nrow=2)
colnames(thincounts) <- c("Nausea", "No Nausea")
rownames(thincounts) <- c("Front", "Rear")
prop.test(x=thincounts, conf.level=.9, correct=FALSE)
oddsRatio(thincounts, verbose=TRUE)
#secondtry =matrix(c(98,161,264,280),nrow=2)
counts
?chisq.test
prop.test(x=thincounts, conf.level=.9, correct=FALSE)
chisq.test(thincounts)
prop.test(x=thincounts, conf.level=.9, correct=FALSE)
View(thincounts)
View(counts)
counts=matrix(c(98,110,161,264,321,280),nrow=3)
colnames(counts) <- c("Nausea", "No Nausea")
rownames(counts) <- c("Front","Middle", "Rear")
addmargins(counts)
chisq.test(counts)
nausea =c(98,161)
totalriders = c((98+264), + (161+280))
prop.test(nausea, totalriders, conf.level=.9, correct=FALSE)
oddsRatio(thincounts, verbose=TRUE)
#secondtry =matrix(c(98,161,264,280),nrow=2)
counts
?chisq.test
Outstanding=c(66,70)
Total=c(147,220)
out <- prop.test(Outstanding,Total,correct=FALSE) # continuity correction is optional
prop.test(Outstanding,Total,correct=FALSE) # continuity correction is optional
prop.test(nausea, totalriders, conf.level=.9, correct=FALSE)
prop.test(nausea, totalriders, conf.level=.9, correct=FALSE)
oddsRatio(thincounts, verbose=TRUE)
(161/280)/(98/264)
esp(2.787)
exp(2.787)
summary(cheese.first.model)
View(cheese)
exp(2.787)
cheese$taste <- factor(cheese$taste, c("Not Acceptable", "Acceptable"))
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
data(cheese, package="DS705data")
cheese$taste <- factor(cheese$taste, c("Acceptable", "Not Acceptable"))
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
exp(2.787)
data(cheese, package="DS705data")
cheese$taste <- factor(cheese$taste, c("Not Acceptable", "Acceptable"))
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
exp(2.787)
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
predict(cheese.first.model, childpred, type="response")$conf.int
data(cheese, package="DS705data")
cheese$taste <- factor(cheese$taste, c("Not Acceptable", "Acceptable"))
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
exp(2.787)
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
adultpred <- data.frame(acetic=c(6), person=c("Adult"))
predict(cheese.first.model, adultpred, type="response")
adultpred <- data.frame(acetic=c(6.5), person=c("Adult"))
predict(cheese.first.model, adultpred, type="response")
childpred <- data.frame(acetic=c(8), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
childpred <- data.frame(acetic=c(7), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
childpred <- data.frame(acetic=c(5), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
childpred <- data.frame(acetic=c(4), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
childpred <- data.frame(acetic=c(4.5), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
childpred <- data.frame(acetic=c(6.5), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
adultpred <- data.frame(acetic=c(6), person=c("Adult"))
predict(cheese.first.model, adultpred, type="response")
adultpred <- data.frame(acetic=c(5), person=c("Adult"))
predict(cheese.first.model, adultpred, type="response")
out <- predict(cheese.first.model, childpred, type="response")
out
data(cheese, package="DS705data")
cheese$taste <- factor(cheese$taste, c("Not Acceptable", "Acceptable"))
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
exp(2.787)
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
out <- predict(cheese.first.model, childpred, type="response")
out
C = .95  # define the level of confidence
crit = qnorm(1-(1-C)/2)  # get the appropriate critical value
lower = exp(out$fit-crit*out$se.fit)/(1+exp(out$fit-crit*out$se.fit))
out <- predict(cheese.first.model, childpred, type="response", se.fit=TRUE)
out
data(cheese, package="DS705data")
cheese$taste <- factor(cheese$taste, c("Not Acceptable", "Acceptable"))
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
exp(2.787)
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
out <- predict(cheese.first.model, childpred, type="response", se.fit=TRUE)
out
C = .95  # define the level of confidence
crit = qnorm(1-(1-C)/2)  # get the appropriate critical value
lower = exp(out$fit-crit*out$se.fit)/(1+exp(out$fit-crit*out$se.fit))
upper = exp(out$fit+crit*out$se.fit)/(1+exp(out$fit+crit*out$se.fit))
c(lower,upper)
?predict
data(cheese, package="DS705data")
cheese$taste <- factor(cheese$taste, c("Not Acceptable", "Acceptable"))
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
exp(2.787)
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
out <- predict(cheese.first.model, childpred, type="response", se.fit=TRUE)
out
C = .95  # define the level of confidence
crit = qnorm(1-(1-C)/2)  # get the appropriate critical value
lower = exp(out$fit-crit*out$se.fit)/(1+exp(out$fit-crit*out$se.fit))
upper = exp(out$fit+crit*out$se.fit)/(1+exp(out$fit+crit*out$se.fit))
c(lower,upper)
c(lower,upper)
out
C = .95  # define the level of confidence
crit = qnorm(1-(1-C)/2)  # get the appropriate critical value
lower = exp(out$fit-crit*out$se.fit)/(1+exp(out$fit-crit*out$se.fit))
upper = exp(out$fit+crit*out$se.fit)/(1+exp(out$fit+crit*out$se.fit))
c(lower,upper)
data(cheese, package="DS705data")
cheese$taste <- factor(cheese$taste, c("Not Acceptable", "Acceptable"))
cheese.first.model <- glm(taste ~ acetic + person, data=cheese, family="binomial")
summary(cheese.first.model)
exp(2.787)
childpred <- data.frame(acetic=c(6), person=c("Child"))
predict(cheese.first.model, childpred, type="response")
out <- predict(cheese.first.model, childpred, se.fit=TRUE)
out
C = .95  # define the level of confidence
crit = qnorm(1-(1-C)/2)  # get the appropriate critical value
lower = exp(out$fit-crit*out$se.fit)/(1+exp(out$fit-crit*out$se.fit))
upper = exp(out$fit+crit*out$se.fit)/(1+exp(out$fit+crit*out$se.fit))
c(lower,upper)
c(lower,upper)
oneway.test(treadwear$wear~treadwear$brand, var.equal=F)
shapiro.test(treadwear$wear[treadwear$brand=='A'])
shapiro.test(treadwear$wear[treadwear$brand=='B'])
shapiro.test(treadwear$wear[treadwear$brand=='C'])
shapiro.test(treadwear$wear[treadwear$brand=='D'])
boxplot(treadwear$wear~treadwear$brand)
shapiro.test(treadwear$wear[treadwear$brand=='A'])
shapiro.test(treadwear$wear[treadwear$brand=='B'])
shapiro.test(treadwear$wear[treadwear$brand=='C'])
shapiro.test(treadwear$wear[treadwear$brand=='D'])
View(treadwear)
boxplot(treadwear$wear~treadwear$brand)
oneway.test(treadwear$wear~treadwear$brand, var.equal=F)
?oneway.test
oneway.test(treadwear$wear~treadwear$brand, var.equal=T)
oneway.test(treadwear$wear~treadwear$brand, var.equal=F)
?p.adjust
pairwise.t.test(treadwear$wear, treadwear$brand, p.adjust.method='bonf', pool.sd=FALSE)$p.value<0.05
onewayComp(wear~brand,data=treadwear, var.equal=FALSE, alpha=.05, adjust='bonferroni')
onewayComp(RPM~Type,data=Cars93, var.equal=FALSE, alpha=.05, adjust='bonferroni')$comp[,c(1,2,3)]
?onewayComp
onewayComp(wear~brand,data=treadwear, var.equal=FALSE, alpha=.05, adjust='holm')
boxplot(treadwear$wear~treadwear$brand)
mean(treadwear$wear[treadwear$brand=='A'])
mean(treadwear$wear[treadwear$brand=='B'])
onewayComp(wear~brand,data=treadwear, var.equal=FALSE, alpha=.05, adjust='holm')
